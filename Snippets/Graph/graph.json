{
	"Graph": {
		"prefix": "graph",
		"body": [
			"class Graph",
			"{",
			"private:",
			"\tconst vector<vector<pair<int, long long>>> adj;",
			"",
			"\tconst vector<vector<pair<int, long long>>> get_weighted_adj(const vector<vector<int>> &unweighted_adj) const",
			"\t{",
			"\t\tvector<vector<pair<int, long long>>> weighted_adj(unweighted_adj.size());",
			"\t\tfor(int i = 0; i < unweighted_adj.size(); i++)",
			"\t\t{",
			"\t\t\tfor(int j = 0; j < unweighted_adj[i].size(); j++)",
			"\t\t\t{",
			"\t\t\t\tweighted_adj[i].push_back({unweighted_adj[i][j], 1LL});",
			"\t\t\t}",
			"\t\t}",
			"\t\treturn weighted_adj;",
			"\t}",
			"",
			"public:",
			"\tGraph(const vector<vector<pair<int, long long>>> &_adj) : adj(_adj) {}",
			"\tGraph(const vector<vector<int>> &_adj) : adj(get_weighted_adj(_adj)) {}",
			"",
			"\tbool is_bipartite() const",
			"\t{",
			"\t\tvector<bool> vis(adj.size()), col(adj.size());",
			"\t\tfor(int i = 0; i < adj.size(); i++)",
			"\t\t{",
			"\t\t\tif(vis[i])",
			"\t\t\t\tcontinue;",
			"\t\t\tstack<int> st;",
			"\t\t\tvis[i] = true;",
			"\t\t\tst.push(i);",
			"\t\t\twhile(!st.empty())",
			"\t\t\t{",
			"\t\t\t\tconst int x = st.top();",
			"\t\t\t\tst.pop();",
			"\t\t\t\tfor(const pair<int, long long> &p : adj[x])",
			"\t\t\t\t{",
			"\t\t\t\t\tif(vis[p.first])",
			"\t\t\t\t\t{",
			"\t\t\t\t\t\tif(col[p.first] == col[x])",
			"\t\t\t\t\t\t\treturn false;",
			"\t\t\t\t\t\tcontinue;",
			"\t\t\t\t\t}",
			"\t\t\t\t\tcol[p.first] = !col[x];",
			"\t\t\t\t\tvis[p.first] = true;",
			"\t\t\t\t\tst.push(p.first);",
			"\t\t\t\t}",
			"\t\t\t}",
			"\t\t}",
			"\t\treturn true;",
			"\t}",
			"",
			"\tlong long distance(const int source, const int destination) const",
			"\t{",
			"\t\tvector<bool> vis(adj.size());",
			"\t\tpriority_queue<pair<int, long long>, vector<pair<int, long long>>, greater<pair<int, long long>>> pq;",
			"\t\tpq.push({0, source});",
			"\t\twhile(!pq.empty())",
			"\t\t{",
			"\t\t\tconst long long w = pq.top().first;",
			"\t\t\tconst int x = pq.top().second;",
			"\t\t\tpq.pop();",
			"\t\t\tif(x == destination)",
			"\t\t\t\treturn w;",
			"\t\t\tif(vis[x])",
			"\t\t\t\tcontinue;",
			"\t\t\tvis[x] = true;",
			"\t\t\tfor(const pair<int, long long> &p : adj[x])",
			"\t\t\t\tpq.push({w + p.S, p.F});",
			"\t\t}",
			"\t\treturn numeric_limits<long long>::max();",
			"\t}",
			"};"
		],
		"description": "Graph class"
	}
}
